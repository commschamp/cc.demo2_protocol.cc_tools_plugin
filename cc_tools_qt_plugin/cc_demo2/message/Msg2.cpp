// Generated by commsdsl2tools_qt v6.3.0

#include "Msg2.h"

#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_demo2/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo2
{

namespace message
{

namespace
{

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_f1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F1;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_f2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F2Field;
            using OptField = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F2;
            auto props =
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();

            return
                cc_tools_qt::property::field::ForField<OptField>()
                    .name(Field::name())
                    .uncheckable()
                    .field(std::move(props))
                    .asMap();
        }

        static QVariantMap createProps_f3(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F3Field;
            using OptField = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F3;
            auto props =
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();

            return
                cc_tools_qt::property::field::ForField<OptField>()
                    .name(Field::name())
                    .uncheckable()
                    .field(std::move(props))
                    .asMap();
        }

        static QVariantMap createProps_f4(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F4Field;
            using OptField = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::ElementMembers::F4;
            auto props =
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();

            return
                cc_tools_qt::property::field::ForField<OptField>()
                    .name(Field::name())
                    .uncheckable()
                    .field(std::move(props))
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_f1(serHidden))
                .add(ElementMembers::createProps_f2(serHidden))
                .add(ElementMembers::createProps_f3(serHidden))
                .add(ElementMembers::createProps_f4(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_demo2::message::Msg2Fields<cc_tools_qt_plugin::cc_demo2::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_list(false));
    return props;
}

} // namespace

Msg2::Msg2() = default;
Msg2::~Msg2() = default;
Msg2& Msg2::operator=(const Msg2&) = default;
Msg2& Msg2::operator=(Msg2&&) = default;

const QVariantList& Msg2::fieldsPropertiesImpl() const
{
    static const QVariantList Props = createProps();
    return Props;
}

} // namespace message

} // namespace cc_demo2

} // namespace cc_tools_qt_plugin
