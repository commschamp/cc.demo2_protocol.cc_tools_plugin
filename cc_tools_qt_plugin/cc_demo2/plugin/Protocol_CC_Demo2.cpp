// Generated by commsdsl2tools_qt v6.3.0

#include "Protocol_CC_Demo2.h"

#include <cassert>
#include "cc_tools_qt/ProtocolBase.h"
#include "cc_tools_qt_plugin/cc_demo2/frame/Frame.h"
#include "cc_tools_qt_plugin/cc_demo2/frame/FrameTransportMessage.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo2
{

namespace plugin
{

class Protocol_CC_Demo2Impl : public
    cc_tools_qt::ProtocolBase<
        cc_tools_qt_plugin::cc_demo2::frame::Frame,
        cc_tools_qt_plugin::cc_demo2::frame::FrameTransportMessage
    >
{
    using Base =
        cc_tools_qt::ProtocolBase<
            cc_tools_qt_plugin::cc_demo2::frame::Frame,
            cc_tools_qt_plugin::cc_demo2::frame::FrameTransportMessage
        >;
public:
    friend class cc_tools_qt_plugin::cc_demo2::plugin::Protocol_CC_Demo2;

    Protocol_CC_Demo2Impl() = default;
    virtual ~Protocol_CC_Demo2Impl() = default;

    int getVersion() const
    {
        return m_version;
    }

    void setVersion(int value)
    {
        m_version = value;
    }

protected:
    virtual const QString& nameImpl() const override
    {
        static const QString Str("CC Demo2");
        return Str;
    }

    virtual MessagesList createAllMessagesImpl() override
    {
        auto list = Base::createAllMessagesImpl();
        for (auto& mPtr : list) {
            updateMessageWithVersion(*mPtr);
        }
        return list;
    }

    virtual cc_tools_qt::MessagePtr createMessageImpl(const QString& idAsString, unsigned idx) override
    {
        auto mPtr = Base::createMessageImpl(idAsString, idx);
        updateMessageWithVersion(*mPtr);
        return mPtr;
    }

    using Base::createInvalidMessageImpl;
    using Base::createRawDataMessageImpl;
    using Base::createExtraInfoMessageImpl;

private:
    void updateMessageWithVersion(cc_tools_qt::Message& msg)
    {
        assert(dynamic_cast<cc_tools_qt_plugin::cc_demo2::Message*>(&msg) != nullptr);
        static_assert(cc_tools_qt_plugin::cc_demo2::Message::hasVersionInTransportFields(),
            "Interface type is expected to has version in transport fields");
        static const std::size_t VersionIdx = 
            cc_tools_qt_plugin::cc_demo2::Message::versionIdxInTransportFields();
        auto& castedMsg = static_cast<cc_tools_qt_plugin::cc_demo2::Message&>(msg);
        std::get<VersionIdx>(castedMsg.transportFields()).value() =
            static_cast<cc_tools_qt_plugin::cc_demo2::Message::VersionType>(m_version);
        castedMsg.refresh();
        updateMessage(msg);
    }

    int m_version = 5U;
};

Protocol_CC_Demo2::Protocol_CC_Demo2()
  : m_pImpl(new Protocol_CC_Demo2Impl())
{
}

Protocol_CC_Demo2::~Protocol_CC_Demo2() = default;

int Protocol_CC_Demo2::getVersion() const
{
    return m_pImpl->getVersion();
}

void Protocol_CC_Demo2::setVersion(int value)
{
    m_pImpl->setVersion(value);
}

const QString& Protocol_CC_Demo2::nameImpl() const
{
    return m_pImpl->name();
}

Protocol_CC_Demo2::MessagesList Protocol_CC_Demo2::readImpl(const cc_tools_qt::DataInfo& dataInfo, bool final)
{
    return m_pImpl->read(dataInfo, final);
}

cc_tools_qt::DataInfoPtr Protocol_CC_Demo2::writeImpl(cc_tools_qt::Message& msg)
{
    return m_pImpl->write(msg);
}

Protocol_CC_Demo2::MessagesList Protocol_CC_Demo2::createAllMessagesImpl()
{
    return m_pImpl->createAllMessages();
}

cc_tools_qt::MessagePtr Protocol_CC_Demo2::createMessageImpl(const QString& idAsString, unsigned idx)
{
    return static_cast<cc_tools_qt::Protocol*>(m_pImpl.get())->createMessage(idAsString, idx);
}

Protocol_CC_Demo2::UpdateStatus Protocol_CC_Demo2::updateMessageImpl(cc_tools_qt::Message& msg)
{
    return m_pImpl->updateMessage(msg);
}

cc_tools_qt::MessagePtr Protocol_CC_Demo2::cloneMessageImpl(const cc_tools_qt::Message& msg)
{
    return m_pImpl->cloneMessage(msg);
}

cc_tools_qt::MessagePtr Protocol_CC_Demo2::createInvalidMessageImpl()
{
    return m_pImpl->createInvalidMessageImpl();
}

cc_tools_qt::MessagePtr Protocol_CC_Demo2::createRawDataMessageImpl()
{
    return m_pImpl->createRawDataMessageImpl();
}

cc_tools_qt::MessagePtr Protocol_CC_Demo2::createExtraInfoMessageImpl()
{
    return m_pImpl->createExtraInfoMessageImpl();
}

} // namespace plugin

} // namespace cc_demo2

} // namespace cc_tools_qt_plugin
