// Generated by commsdsl2tools_qt v6.3.4

#include "cc_demo2/MsgId.h"
#include "cc_tools_qt_plugin/cc_demo2/factory/AllMessagesDynMemMsgFactory.h"
#include "cc_tools_qt_plugin/cc_demo2/input/AllMessages.h"

namespace cc_tools_qt_plugin
{

namespace cc_demo2
{

namespace factory
{

AllMessagesDynMemMsgFactory::MsgPtr AllMessagesDynMemMsgFactory::createMsg(MsgIdParamType id, unsigned idx, CreateFailureReason* reason) const
{
    auto updateReasonFunc =
        [reason](CreateFailureReason val)
        {
            if (reason != nullptr) {
                *reason = val;
            }
        };

    if (1U <= idx) {
        updateReasonFunc(CreateFailureReason::InvalidId);
        return MsgPtr();
    }

    updateReasonFunc(CreateFailureReason::None);
    switch (id) {
        case ::cc_demo2::MsgId_Msg1: return MsgPtr(new cc_tools_qt_plugin::cc_demo2::message::Msg1);
        case ::cc_demo2::MsgId_Msg2: return MsgPtr(new cc_tools_qt_plugin::cc_demo2::message::Msg2);
        default: break;
    }

    updateReasonFunc(CreateFailureReason::InvalidId);
    return MsgPtr();
}

std::size_t AllMessagesDynMemMsgFactory::msgCount(MsgIdParamType id) const
{
    switch (id)
    {
        case ::cc_demo2::MsgId_Msg1: return 1U;
        case ::cc_demo2::MsgId_Msg2: return 1U;
        default: break;
    }

    return 0U;
}

} // namespace factory

} // namespace cc_demo2

} // namespace cc_tools_qt_plugin
