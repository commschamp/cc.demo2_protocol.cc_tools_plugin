// Generated by commsdsl2tools_qt v7.1.0

#include "Msg2.h"

#include "cc_demo2/message/Msg2.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_demo2/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_demo2
{

namespace message
{

class Msg2Impl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_demo2::Message,
        ::cc_demo2::message::Msg2,
        Msg2Impl
    >
{
public:
    Msg2Impl() = default;
    Msg2Impl(const Msg2Impl&) = default;
    Msg2Impl(Msg2Impl&&) = default;
    virtual ~Msg2Impl() = default;
    Msg2Impl& operator=(const Msg2Impl&) = default;
    Msg2Impl& operator=(Msg2Impl&&) = default;
};

Msg2::Msg2() : m_pImpl(new Msg2Impl) {}
Msg2::~Msg2() = default;

Msg2& Msg2::operator=(const Msg2& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Msg2& Msg2::operator=(Msg2&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Msg2::nameImpl() const
{
    return m_pImpl->name();
}

bool Msg2::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Msg2::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Msg2::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Msg2::resetImpl()
{
    m_pImpl->reset();
}

bool Msg2::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Msg2*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Msg2::isValidImpl() const
{
    return m_pImpl->isValid();
}

Msg2::DataSeq Msg2::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Msg2::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Msg2::Ptr Msg2::cloneImpl() const
{
    ImplPtr impl(static_cast<Msg2Impl*>(m_pImpl->clone().release()));
    return Ptr(new Msg2(std::move(impl)));
}

void Msg2::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Msg2::DataSeq Msg2::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Msg2::FieldsList Msg2::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Msg2::FieldsList Msg2::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Msg2::Msg2(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_demo2

} // namespace Message

} // namespace cc_tools_qt_plugin
